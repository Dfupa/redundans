name: Run Unit Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  #schedule:
  #  - cron: '0 0 * * 0'

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}


    - name: Install required dependencies
      run: |
        # Update the system and install required tools
        sudo apt-get update -qq
        sudo apt-get install -y \
          perl \
          python3-pip \
          git \
          make \
          nano \
          automake \
          wget \
          g++ \
          zlib1g-dev \
          curl \
          libreadline6-dev \
          libx11-dev \
          libxt-dev \
          libpng-dev \
          libjpeg-dev \
          libcairo2-dev \
          xvfb \
          libbz2-dev \
          libzstd-dev \
          liblzma-dev \
          libcurl4-openssl-dev \
          texinfo \
          texlive \
          texlive-fonts-extra \
          screen \
          libpcre2-dev
          
        # Upgrade pip and install Python dependencies
        python3 -m pip install --upgrade pip
        pip3 install --upgrade matplotlib Pillow

        # Install R dependencies
        sudo apt-get install -y gfortran libreadline6-dev libx11-dev libxt-dev libpng-dev libjpeg-dev libcairo2-dev libbz2-dev libzstd-dev liblzma-dev libcurl4-openssl-dev texinfo texlive texlive-fonts-extra screen libpcre2-dev

    - name: Install R from source
      run: |
        mkdir -p $HOME/src
        cd $HOME/src
        wget https://cran.r-project.org/src/base/R-4/R-4.1.0.tar.gz
        tar zxvf R-4.1.0.tar.gz
        rm R-4.1.0.tar.gz
        cd R-4.1.0/
        ./configure --enable-R-shlib
        make
        make install

        # Install R packages as needed
        Rscript -e 'install.packages("ggplot2", repos = "http://cran.us.r-project.org")'
        Rscript -e 'install.packages("scales", repos = "http://cran.us.r-project.org")'
        Rscript -e 'install.packages("argparse", repos = "http://cran.us.r-project.org")'

    - name: Set up Redundans environment
      run: |
        # Download and compile Redundans
        mkdir -p /root/src
        cd /root/src
        git clone --recursive https://github.com/Gabaldonlab/redundans.git
        cd redundans
        bin/.compile.sh

    - name: Run unit tests
      run: |
        cd /root/src/redundans
        ./redundans.py -v -i test/*_?.fq.gz -f test/contigs.fa -o test/run1
        #Test it using minimap2 for the reduction step, increasing performance for large genomes
        ./redundans.py -v -i test/*_?.fq.gz -f test/contigs.fa --minimap2reduce -o test/run2
        # if your run failed for any reason, you can try to resume it
        rm test/run1/_sspace.2.1.filled.fa
        ./redundans.py -v -i test/*_?.fq.gz -f test/contigs.fa -o test/run1 --resume
        # if you have no contigs assembled, just run without `-f`
        ./redundans.py -v -i test/*_?.fq.gz -o test/run.denovo
        # reduction, scaffolding with paired-end, mate pairs and long reads used to generate a miniasm assembly to do reference-based scaffolding, and gap closing with paired-end and mate pairs using as an aligner minimap2
        ./redundans.py -v -i test/*_?.fq.gz -l test/nanopore.fa.gz -f test/contigs.fa -o test/run_short_long_ref --minimap2scaffold
        # reduction, scaffolding with paired-end, mate pairs and long reads, and gap closing with paired-end and mate pairs using populateScaffolds method using as aligner minimap2
        ./redundans.py -v -i test/*_?.fq.gz -l test/pacbio.fq.gz test/nanopore.fa.gz -f test/contigs.fa -o test/run_short_long_populatescaffold --minimap2scaffold --populateScaffolds
        # scaffolding and gap closing with paired-end and mate pairs (no reduction)
        ./redundans.py -v -i test/*_?.fq.gz -f test/contigs.fa -o test/run_short-scaffolding-closing --noreduction
        # reduction, reference-based scaffolding and gap closing with paired-end reads (--noscaffolding disables only short-read scaffolding)
        ./redundans.py -v -i test/600_?.fq.gz -r test/ref.fa -f test/contigs.fa -o test/run_ref_pe-closing --noscaffolding

    - name: Check test results
      run: |
        # This checks if any of the tests fail and exit with status 1
        if [ $? -ne 0 ]; then
          echo "Tests failed!"
          exit 1
        else
          echo "All tests passed successfully!"
        fi
